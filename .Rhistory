# Replace outliers with NA
data[[col]] <- ifelse(data[[col]] < lower_bound | data[[col]] > upper_bound, NA, data[[col]])
# Count NAs after handling outliers
na_count_after <- sum(is.na(data[[col]]))
# Calculate the number of NAs added
na_counts[col] <- na_count_after - na_count_before
# Print the number of NAs added for the current column
cat("NAs added in", col, ":", na_counts[col], "\n")
data <- na.omit(data)
}
# Return the cleaned data and the NA counts
return(data)
}
View(data)
interesting_columns <- c("BMI", "Cholesterol")
# Apply the function to your dataset
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data <- handle_outliers(data, interesting_columns, 0.45)
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data %<>%
mutate(
Systolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 1)),
Diastolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 2))) %>%
relocate(Systolic, Diastolic, .after = Blood.Pressure)
head(data)
data$Exercise.Hours.Per.Week <- round(data$Exercise.Hours.Per.Week, 2)
data$Sedentary.Hours.Per.Day <- round(data$Sedentary.Hours.Per.Day, 2)
data %>%
select(Exercise.Hours.Per.Week, Sedentary.Hours.Per.Day) %>%
head()
data %<>%
mutate(
Diet_code = case_when(
data$Diet == "Average" ~ 1,
data$Diet == "Unhealthy" ~ 2,
data$Diet == "Healthy" ~ 0))  %>%
relocate(Diet_code, .before = Diet)
data %<>%
mutate(
Sex_code = case_when(
data$Sex == "Male" ~ 0,
data$Sex == "Female" ~ 1))  %>%
relocate(Sex_code, .after = Sex)
data %<>%
mutate(
Pensioner = case_when(
data$Age > 67 ~ 1,
.default = 0))  %>%
relocate(Pensioner, .after = Age)
head(data)
#-----Helper functions-----
panel.cor <- function(x,y, digits=2, prefix="", cex.cor){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0,1,0,1))
r <- abs(cor(x,y,use="complete.obs"))
txt <- format(c(r,0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt,sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2],0,1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white",...)
}
panel.lm <- function(x,y,col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "blue",...){
points(x,y,pch=pch, col=col(alpha = 0.1), bg=bg, cex=cex)
abline(stats::lm(x ~ y), col = "steelblue", ...)
}
data %>%
dplyr::filter() %$%
pairs( ~ BMI + Exercise.Hours.Per.Week + Diet_code + Cholesterol + Sedentary.Hours.Per.Day ,
upper.panel= NULL,
diag.panel=panel.hist,
lower.panel=panel.smooth)
correlation_matrix <- cor(data[, c('BMI', 'Exercise.Hours.Per.Week', 'Diet_code', 'Cholesterol', 'Sedentary.Hours.Per.Day', 'Heart.Rate')])
print(correlation_matrix)
# Create a dataframe from the correlation matrix
correlation_df <- as.data.frame(correlation_matrix)
correlation_df$row <- rownames(correlation_matrix)
# Melt the dataframe to long format
correlation_df_long <- reshape2::melt(correlation_df, id.vars = "row")
# Plot heatmap
ggplot(correlation_df_long, aes(x = row, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
p1 <- data %>%
filter(Sex_code == 1) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Ženy penzistky", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p2 <- data %>%
filter(Sex_code == 0) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Muži penzisti", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p3 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = BMI)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("BMI") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
p4 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = Cholesterol)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("Cholesterol") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
plot_grid(p1, p2, p3, p4, ncol = 2, nrow = 2)
model <- data %$%
lm(BMI ~ Cholesterol + Diet_code + Exercise.Hours.Per.Week)
summary(model)
par(mfrow = c(1,3)) # par() sets up a plotting grid: 1 row x 3 columns
plot(model, which = c(1,2,5))
nevideneData <- tibble(Cholesterol = 300, Sedentary.Hours.Per.Day = 4, Diet_code = 2)
predict(model, newdata = nevideneData)
library(tidyverse)
library(magrittr)
library(data.table)
library(caret)
library(ggplot2)
library(readxl)
library(cowplot)
setwd("C:/Users/David/Desktop/skola/ING/4.semester/OZNAL/Projekt/OZNAL-Submission1-Regression-Classification")
list.files()
data <- read.csv("heart_attack_prediction_dataset.csv")
names(data)
head(data)
summary(data)
number_of_uniq_data <- sapply(data, function(x) length(unique(x)))
cat("Unique values in dataset:\n")
print(number_of_uniq_data)
numeric_columns <- sapply(data, is.numeric)  # Identify numeric columns
non_binary_numeric_columns <- numeric_columns & !apply(data, 2, function(x) all(x %in% c(0, 1)))
non_bin_names <- names(non_binary_numeric_columns[non_binary_numeric_columns])
print_histograms <- function(data, columns) {
for (col_name in columns) {
p <- ggplot(data, aes_string(x = col_name)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", col_name)) +
xlab(col_name) +
ylab("Count")
print(p)
}
}
print_histograms(data, non_bin_names)
for (col_name in non_bin_names){
p <- ggplot(data, aes_string(y = col_name)) +
geom_boxplot(fill = "lightgrey") +
ggtitle(paste("Distribution of", col_name)) +
ylab(col_name) + xlab("")
print(p)
}
handle_outliers <- function(data, columns, sensitivity) {
na_counts <- setNames(numeric(length(columns)), columns)  # Initialize a vector to hold NA counts for each column
for (col in columns) {
# Count NAs before handling outliers
na_count_before <- sum(is.na(data[[col]]))
# Calculate quartiles and IQR
q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
iqr <- q3 - q1
# Define upper and lower bounds for outliers
upper_bound <- q3 + iqr*sensitivity
lower_bound <- q1 - iqr*sensitivity
print(paste("Upper bound for", col, ":", upper_bound))
print(paste("Lower bound for", col, ":", lower_bound))
# Replace outliers with NA
data[[col]] <- ifelse(data[[col]] < lower_bound | data[[col]] > upper_bound, NA, data[[col]])
# Count NAs after handling outliers
na_count_after <- sum(is.na(data[[col]]))
# Calculate the number of NAs added
na_counts[col] <- na_count_after - na_count_before
# Print the number of NAs added for the current column
cat("NAs added in", col, ":", na_counts[col], "\n")
data <- na.omit(data)
}
# Return the cleaned data and the NA counts
return(data)
}
View(data)
interesting_columns <- c("BMI", "Cholesterol")
# Apply the function to your dataset
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data <- handle_outliers(data, interesting_columns, 0.5)
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data %<>%
mutate(
Systolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 1)),
Diastolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 2))) %>%
relocate(Systolic, Diastolic, .after = Blood.Pressure)
head(data)
data$Exercise.Hours.Per.Week <- round(data$Exercise.Hours.Per.Week, 2)
data$Sedentary.Hours.Per.Day <- round(data$Sedentary.Hours.Per.Day, 2)
data %>%
select(Exercise.Hours.Per.Week, Sedentary.Hours.Per.Day) %>%
head()
data %<>%
mutate(
Diet_code = case_when(
data$Diet == "Average" ~ 1,
data$Diet == "Unhealthy" ~ 2,
data$Diet == "Healthy" ~ 0))  %>%
relocate(Diet_code, .before = Diet)
data %<>%
mutate(
Sex_code = case_when(
data$Sex == "Male" ~ 0,
data$Sex == "Female" ~ 1))  %>%
relocate(Sex_code, .after = Sex)
data %<>%
mutate(
Pensioner = case_when(
data$Age > 67 ~ 1,
.default = 0))  %>%
relocate(Pensioner, .after = Age)
head(data)
#-----Helper functions-----
panel.cor <- function(x,y, digits=2, prefix="", cex.cor){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0,1,0,1))
r <- abs(cor(x,y,use="complete.obs"))
txt <- format(c(r,0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt,sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2],0,1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white",...)
}
panel.lm <- function(x,y,col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "blue",...){
points(x,y,pch=pch, col=col(alpha = 0.1), bg=bg, cex=cex)
abline(stats::lm(x ~ y), col = "steelblue", ...)
}
data %>%
dplyr::filter() %$%
pairs( ~ BMI + Exercise.Hours.Per.Week + Diet_code + Cholesterol + Sedentary.Hours.Per.Day ,
upper.panel= NULL,
diag.panel=panel.hist,
lower.panel=panel.smooth)
correlation_matrix <- cor(data[, c('BMI', 'Exercise.Hours.Per.Week', 'Diet_code', 'Cholesterol', 'Sedentary.Hours.Per.Day', 'Heart.Rate')])
print(correlation_matrix)
# Create a dataframe from the correlation matrix
correlation_df <- as.data.frame(correlation_matrix)
correlation_df$row <- rownames(correlation_matrix)
# Melt the dataframe to long format
correlation_df_long <- reshape2::melt(correlation_df, id.vars = "row")
# Plot heatmap
ggplot(correlation_df_long, aes(x = row, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
p1 <- data %>%
filter(Sex_code == 1) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Ženy penzistky", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p2 <- data %>%
filter(Sex_code == 0) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Muži penzisti", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p3 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = BMI)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("BMI") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
p4 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = Cholesterol)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("Cholesterol") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
plot_grid(p1, p2, p3, p4, ncol = 2, nrow = 2)
model <- data %$%
lm(BMI ~ Cholesterol + Diet_code + Exercise.Hours.Per.Week)
summary(model)
par(mfrow = c(1,3)) # par() sets up a plotting grid: 1 row x 3 columns
plot(model, which = c(1,2,5))
nevideneData <- tibble(Cholesterol = 300, Sedentary.Hours.Per.Day = 4, Diet_code = 2)
predict(model, newdata = nevideneData)
library(tidyverse)
library(magrittr)
library(data.table)
library(caret)
library(ggplot2)
library(readxl)
library(cowplot)
setwd("C:/Users/David/Desktop/skola/ING/4.semester/OZNAL/Projekt/OZNAL-Submission1-Regression-Classification")
list.files()
data <- read.csv("heart_attack_prediction_dataset.csv")
names(data)
head(data)
summary(data)
number_of_uniq_data <- sapply(data, function(x) length(unique(x)))
cat("Unique values in dataset:\n")
print(number_of_uniq_data)
numeric_columns <- sapply(data, is.numeric)  # Identify numeric columns
non_binary_numeric_columns <- numeric_columns & !apply(data, 2, function(x) all(x %in% c(0, 1)))
non_bin_names <- names(non_binary_numeric_columns[non_binary_numeric_columns])
print_histograms <- function(data, columns) {
for (col_name in columns) {
p <- ggplot(data, aes_string(x = col_name)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", col_name)) +
xlab(col_name) +
ylab("Count")
print(p)
}
}
print_histograms(data, non_bin_names)
for (col_name in non_bin_names){
p <- ggplot(data, aes_string(y = col_name)) +
geom_boxplot(fill = "lightgrey") +
ggtitle(paste("Distribution of", col_name)) +
ylab(col_name) + xlab("")
print(p)
}
handle_outliers <- function(data, columns, sensitivity) {
na_counts <- setNames(numeric(length(columns)), columns)  # Initialize a vector to hold NA counts for each column
for (col in columns) {
# Count NAs before handling outliers
na_count_before <- sum(is.na(data[[col]]))
# Calculate quartiles and IQR
q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
iqr <- q3 - q1
# Define upper and lower bounds for outliers
upper_bound <- q3 + iqr*sensitivity
lower_bound <- q1 - iqr*sensitivity
print(paste("Upper bound for", col, ":", upper_bound))
print(paste("Lower bound for", col, ":", lower_bound))
# Replace outliers with NA
data[[col]] <- ifelse(data[[col]] < lower_bound | data[[col]] > upper_bound, NA, data[[col]])
# Count NAs after handling outliers
na_count_after <- sum(is.na(data[[col]]))
# Calculate the number of NAs added
na_counts[col] <- na_count_after - na_count_before
# Print the number of NAs added for the current column
cat("NAs added in", col, ":", na_counts[col], "\n")
data <- na.omit(data)
}
# Return the cleaned data and the NA counts
return(data)
}
View(data)
interesting_columns <- c("BMI", "Cholesterol")
# Apply the function to your dataset
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data <- handle_outliers(data, interesting_columns, 0.5)
cat("The dataset has", dim(data)[1], "rows and", dim(data)[2], "columns\n")
data %<>%
mutate(
Systolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 1)),
Diastolic = as.numeric(sapply(strsplit(Blood.Pressure, "/"), `[`, 2))) %>%
relocate(Systolic, Diastolic, .after = Blood.Pressure)
head(data)
data$Exercise.Hours.Per.Week <- round(data$Exercise.Hours.Per.Week, 2)
data$Sedentary.Hours.Per.Day <- round(data$Sedentary.Hours.Per.Day, 2)
data %>%
select(Exercise.Hours.Per.Week, Sedentary.Hours.Per.Day) %>%
head()
data %<>%
mutate(
Diet_code = case_when(
data$Diet == "Average" ~ 1,
data$Diet == "Unhealthy" ~ 2,
data$Diet == "Healthy" ~ 0))  %>%
relocate(Diet_code, .before = Diet)
data %<>%
mutate(
Sex_code = case_when(
data$Sex == "Male" ~ 0,
data$Sex == "Female" ~ 1))  %>%
relocate(Sex_code, .after = Sex)
data %<>%
mutate(
Pensioner = case_when(
data$Age > 67 ~ 1,
.default = 0))  %>%
relocate(Pensioner, .after = Age)
head(data)
#-----Helper functions-----
panel.cor <- function(x,y, digits=2, prefix="", cex.cor){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0,1,0,1))
r <- abs(cor(x,y,use="complete.obs"))
txt <- format(c(r,0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt,sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2],0,1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white",...)
}
panel.lm <- function(x,y,col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "blue",...){
points(x,y,pch=pch, col=col(alpha = 0.1), bg=bg, cex=cex)
abline(stats::lm(x ~ y), col = "steelblue", ...)
}
data %>%
dplyr::filter() %$%
pairs( ~ BMI + Exercise.Hours.Per.Week + Diet_code + Cholesterol + Sedentary.Hours.Per.Day ,
upper.panel= NULL,
diag.panel=panel.hist,
lower.panel=panel.smooth)
correlation_matrix <- cor(data[, c('BMI', 'Exercise.Hours.Per.Week', 'Diet_code', 'Cholesterol', 'Sedentary.Hours.Per.Day', 'Heart.Rate')])
print(correlation_matrix)
# Create a dataframe from the correlation matrix
correlation_df <- as.data.frame(correlation_matrix)
correlation_df$row <- rownames(correlation_matrix)
# Melt the dataframe to long format
correlation_df_long <- reshape2::melt(correlation_df, id.vars = "row")
# Plot heatmap
ggplot(correlation_df_long, aes(x = row, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
p1 <- data %>%
filter(Sex_code == 1) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Ženy penzistky", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p2 <- data %>%
filter(Sex_code == 0) %>%
ggplot(., aes(x = BMI, y = Cholesterol)) +
geom_point(shape = 1, alpha=0.1, size = 2) +
stat_smooth(method="lm", se=TRUE, fill=NA,
formula=y ~ poly(x, 1, raw=FALSE),colour="red", linewidth=0.3) +
ggtitle("Muži penzisti", subtitle = "") +
ylab("Cholesterol") + xlab("BMI") +
scale_y_continuous(labels = scales::comma)+
geom_rug(position = "jitter", size = 0.2)
p3 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = BMI)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("BMI") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
p4 <- data %>%
ggplot(., aes(x = factor(Sex_code), y = Cholesterol)) +
geom_boxplot(fill = "lightgrey") +
ggtitle("Cholesterol") +
ylab("") + xlab("") +
scale_x_discrete(labels = c("Ženy", "Muži"))
plot_grid(p1, p2, p3, p4, ncol = 2, nrow = 2)
model <- data %$%
lm(BMI ~ Cholesterol + Diet_code )
summary(model)
par(mfrow = c(1,3)) # par() sets up a plotting grid: 1 row x 3 columns
plot(model, which = c(1,2,5))
nevideneData <- tibble(Cholesterol = 300, Sedentary.Hours.Per.Day = 4, Diet_code = 2)
predict(model, newdata = nevideneData)
