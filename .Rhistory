}
# Number of missing values
missing_values_data <- colSums(is.na(data))
missing_values_reviews <- colSums(is.na(data_user_reviews))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data, missing_values_reviews)
for (x in 0:2) {
# Print columns with corresponding number of missing values
cat("Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
cat("\n Columns with corresponding number of missing values:\n")
for (x in 0:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
for (x in 0:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
for (x in 1:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
sum(duplicated(data_user_reviews))
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
# Extract numeric columns and save them into a list
numeric_cols_list <- lapply(data[, numeric_cols], as.numeric)
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
# Subset dataframe to include only numeric columns
numeric_data <- data[, numeric_cols]
# Create a boxplot for each numeric column
par(mfrow=c(ceiling(sum(numeric_cols) / 2), 2))  # Setting up the layout for multiple boxplots
for (i in 1:ncol(numeric_data)) {
boxplot(numeric_data[, i], main = names(numeric_data)[i], xlab = "")  # Plotting boxplot with column name
}
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
numeric_cols
# Subset dataframe to include only numeric columns
numeric_data <- data[, numeric_cols]
numeric_data
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
# Subset dataframe to include only numeric columns
numeric_data <- data[, numeric_cols]
# Check if there are any numeric columns
if (sum(numeric_cols) > 0) {
# Create a boxplot for each numeric column
par(mfrow=c(ceiling(sum(numeric_cols) / 2), 2))  # Setting up the layout for multiple boxplots
for (i in 1:ncol(numeric_data)) {
boxplot(numeric_data[, i], main = names(numeric_data)[i], xlab = "")  # Plotting boxplot with column name
}
} else {
print("No numeric columns found.")
}
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
# Subset dataframe to include only numeric columns
numeric_data <- data[, numeric_cols]
numeric_data
# Identify numeric columns
numeric_cols <- sapply(data, is.numeric)
numeric_cols
convert_to_numeric <- function(df, cols) {
for (col in cols) {
# Remove symbols and convert to numeric
if (col == "Size") {
df[[col]] <- as.numeric(gsub("M", "", df[[col]]))
names(df)[which(names(df) == col)] <- "Size in MB"
} else if (col == "Installs") {
df[[col]] <- as.numeric(gsub("\\+|,", "", df[[col]]))
} else if (col == "Price") {
df[[col]] <- as.numeric(gsub("\\$", "", df[[col]]))
names(df)[which(names(df) == col)] <- "Price in Dollars"
} else {
df[[col]] <- as.numeric(df[[col]])
}
}
return(df)
}
# Columns to be converted to numeric
cols_to_numeric <- c("Reviews", "Installs", "Size", "Price")
# Apply function to mutate original dataframe
data <- convert_to_numeric(data, cols_to_numeric)
# Print first few rows to verify the changes
head(data)
# Columns to be converted to numeric
cols_to_numeric <- c("Reviews", "Installs", "Size", "Price")
# Apply function to mutate original dataframe
data <- convert_to_numeric(data, cols_to_numeric)
data <- read.csv("googleplaystore.csv")
data_user_reviews <- read.csv("googleplaystore_user_reviews.csv")
head(data,10)
head(data_user_reviews,10)
# Descriptive statistics
summary(data)
summary(data_user_reviews)
# Unique values
lapply(data, unique)
lapply(data_user_reviews, unique)
# Number of missing values
missing_values_data <- colSums(is.na(data))
missing_values_reviews <- colSums(is.na(data_user_reviews))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data, missing_values_reviews)
for (x in 1:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
sum(duplicated(data_user_reviews))
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
# mutate columns holding numeric values into numeric
convert_to_numeric <- function(df, cols) {
for (col in cols) {
# Remove symbols and convert to numeric
if (col == "Size") {
df[[col]] <- as.numeric(gsub("M", "", df[[col]]))
names(df)[which(names(df) == col)] <- "Size in MB"
} else if (col == "Installs") {
df[[col]] <- as.numeric(gsub("\\+|,", "", df[[col]]))
} else if (col == "Price") {
df[[col]] <- as.numeric(gsub("\\$", "", df[[col]]))
names(df)[which(names(df) == col)] <- "Price in Dollars"
} else {
df[[col]] <- as.numeric(df[[col]])
}
}
return(df)
}
# Columns to be converted to numeric
cols_to_numeric <- c("Reviews", "Installs", "Size", "Price")
# Apply function to mutate original dataframe
data <- convert_to_numeric(data, cols_to_numeric)
# Print first few rows to verify the changes
head(data)
View(data)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("\\+", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
# Print the structure of the new dataset
str(new_data)
data <- read.csv("googleplaystore.csv")
data_user_reviews <- read.csv("googleplaystore_user_reviews.csv")
# Number of missing values
missing_values_data <- colSums(is.na(data))
missing_values_reviews <- colSums(is.na(data_user_reviews))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data, missing_values_reviews)
# Print missing values
for (x in 1:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
sum(duplicated(data_user_reviews))
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("\\+", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
# Print first few rows to verify the changes
head(data)
View(data)
# Print first few rows to verify the changes
head(new_data)
View(new_data)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
# Print first few rows to verify the changes
head(new_data)
View(new_data)
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# # Convert Size to numeric and remove 'M'
# new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
#
# # Convert Price to numeric and remove '$'
# new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
# Filter rows where Type is Free
free_apps <- subset(new_data, Type == "Free")
# Print NAs of column Price_in_Dollars
nas_price_free <- free_apps$Price_in_Dollars[is.na(free_apps$Price_in_Dollars)]
print(nas_price_free)
data <- read.csv("googleplaystore.csv")
data_user_reviews <- read.csv("googleplaystore_user_reviews.csv")
head(data,10)
head(data_user_reviews,10)
# Descriptive statistics
summary(data)
summary(data_user_reviews)
# Unique values
lapply(data, unique)
lapply(data_user_reviews, unique)
# Number of missing values
missing_values_data <- colSums(is.na(data))
missing_values_reviews <- colSums(is.na(data_user_reviews))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data, missing_values_reviews)
# Print missing values
for (x in 1:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
sum(duplicated(data_user_reviews))
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
# Filter rows where Type is Free
free_apps <- subset(new_data, Type == "Free")
# Print first few rows to verify the changes
head(new_data)
View(new_data)
# Function to fill missing values of numeric columns with mean
fill_missing_with_mean <- function(data) {
# Find numeric columns
numeric_cols <- sapply(data, is.numeric)
# Fill missing values with mean for numeric columns
for (col in names(data)[numeric_cols]) {
mean_val <- mean(data[[col]], na.rm = TRUE)  # Calculate mean
data[[col]][is.na(data[[col]])] <- mean_val  # Replace NA with mean
}
return(data)
}
# Apply the function to the dataset
new_data_filled <- fill_missing_with_mean(new_data)
# Print first few rows to verify the changes
head(new_data)
View(new_data)
# Apply the function to the dataset
new_data_filled <- fill_missing_with_mean(new_data)
# Print first few rows to verify the changes
head(new_data_filled)
View(new_data_filled)
# Number of missing values
missing_values_data <- colSums(is.na(new_data_filled))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data)
# Print missing values
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
library(tidyverse)
library(magrittr) # Implements pipes
library(data.table) # Implements the %like% operator
library(caret)
library(ggplot2)
library(readxl)
setwd("D:\\MRc\\FIIT\\ING\\sem2\\oznal\\zadanie_1")
list.files() # List all files in the working directory
data <- read.csv("googleplaystore.csv")
data_user_reviews <- read.csv("googleplaystore_user_reviews.csv")
head(data,10)
head(data_user_reviews,10)
# Descriptive statistics
summary(data)
summary(data_user_reviews)
# Unique values
lapply(data, unique)
lapply(data_user_reviews, unique)
# Number of missing values
missing_values_data <- colSums(is.na(data))
missing_values_reviews <- colSums(is.na(data_user_reviews))
# Create a list combining missing values counts for both dataframes
miscols <- c(missing_values_data, missing_values_reviews)
# Print missing values
for (x in 1:2) {
cat("\n Columns with corresponding number of missing values:\n")
for (col in names(miscols)) {
cat(sprintf("%s: %d\n", col, miscols[col]))
}
}
# Number of duplicate records
sum(duplicated(data))
sum(duplicated(data_user_reviews))
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
# data hold columns that hold numeric data in non numeric format
# these columns with be converted into numeric, and additional characters will be removed
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
head(new_data)
View(new_data)
# Function to fill missing values of numeric columns with mean
fill_missing_with_mean <- function(data) {
# Find numeric columns
numeric_cols <- sapply(data, is.numeric)
# Fill missing values with mean for numeric columns
for (col in names(data)[numeric_cols]) {
mean_val <- mean(data[[col]], na.rm = TRUE)  # Calculate mean
data[[col]][is.na(data[[col]])] <- mean_val  # Replace NA with mean
}
return(data)
}
# Apply the function to the dataset
new_data_filled <- fill_missing_with_mean(new_data)
# Print first few rows to verify the changes
head(new_data_filled)
View(new_data_filled)
data <- distinct(data)
data_user_reviews <- distinct(data_user_reviews)
# data hold columns that hold numeric data in non numeric format
# these columns with be converted into numeric, and additional characters will be removed
convert_to_numeric <- function(data) {
# Make a copy of the original dataset
new_data <- data
# Convert Reviews to numeric
new_data$Reviews <- as.numeric(new_data$Reviews)
# Convert Installs to numeric and remove '+'
new_data$Installs <- as.numeric(gsub("[^0-9.]", "", new_data$Installs))
# Convert Size to numeric and remove 'M'
new_data$Size <- as.numeric(gsub("M", "", new_data$Size))
# Convert Price to numeric and remove '$'
new_data$Price <- as.numeric(gsub("\\$", "", new_data$Price))
# Round numeric columns to 2 decimal places
numeric_cols <- sapply(new_data, is.numeric)
new_data[, numeric_cols] <- round(new_data[, numeric_cols], 2)
# Rename columns
colnames(new_data)[colnames(new_data) == "Size"] <- "Size_in_MB"
colnames(new_data)[colnames(new_data) == "Price"] <- "Price_in_Dollars"
return(new_data)
}
# Apply the function to the dataset
new_data <- convert_to_numeric(data)
head(new_data)
View(new_data)
# Function to fill missing values of numeric columns with mean
fill_missing_with_mean <- function(data) {
# Find numeric columns
numeric_cols <- sapply(data, is.numeric)
# Fill missing values with mean for numeric columns
for (col in names(data)[numeric_cols]) {
mean_val <- mean(data[[col]], na.rm = TRUE)  # Calculate mean
data[[col]][is.na(data[[col]])] <- mean_val  # Replace NA with mean
}
return(data)
}
# Apply the function to the dataset
new_data_filled <- fill_missing_with_mean(new_data)
# Print first few rows to verify the changes
head(new_data_filled)
View(new_data_filled)
# Function to fill missing values of numeric columns with mean
fill_missing_with_mean <- function(data) {
# Find numeric columns
numeric_cols <- sapply(data, is.numeric)
# Fill missing values with mean for numeric columns
for (col in names(data)[numeric_cols]) {
mean_val <- mean(data[[col]], na.rm = TRUE)  # Calculate mean
data[[col]] <- ifelse(is.na(data[[col]]), round(mean_val, 2), data[[col]])  # Replace NA with mean rounded to 2 decimal places
}
return(data)
}
# Apply the function to the dataset
new_data_filled <- fill_missing_with_mean(new_data)
# Print first few rows to verify the changes
head(new_data_filled)
View(new_data_filled)
# View(data)
View(data_user_reviews)
library(tidyverse)
library(magrittr)
library(data.table)
library(caret)
library(ggplot2)
library(readxl)
setwd("C:\\Users\\David\\Desktop\\skola\\ING\\4.semester\\OZNAL\\Projekt")
list.files()
data <- read.csv("data/googleplaystore.csv")
data <- read.csv("Data/googleplaystore.csv")
data <- read.csv("data/googleplaystore.csv")
setwd("C:\\Users\\David\\Desktop\\skola\\ING\\4.semester\\OZNAL\\OZNAL-Submission1-Regression-Classification")
